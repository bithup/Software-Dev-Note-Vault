{
	"nodes":[
		{"id":"df5ec91e9693e672","type":"group","x":-1260,"y":248,"width":3180,"height":3112,"label":"docker"},
		{"id":"2c585fe29aa1edb7","type":"text","text":"## 本地docker镜像管理\n\n查看\n```shell\n# 查看本地镜像\ndocker images -a\n```\n\n导入导出\n```shell\n# 加载tar文件到本地镜像库\ndocker load -i [文件路径]\n# 导出镜像到tar文件\ndocker save -o [目标文件路径] [镜像名:版本]\n```\n\n删除\n```shell\n#删除镜像\ndocker rmi [镜像名]\n```","x":120,"y":320,"width":790,"height":640},
		{"id":"9a17ec90b2162fd6","type":"text","text":"## 远程docker镜像管理\n### dockerhub\n\n\n```shell\n# 拉去远程镜像\ndocker pull centos:latest\n\n```\n\n### 私有docker镜像仓库","x":1000,"y":320,"width":800,"height":640},
		{"id":"31ccb5b65bfbc22a","type":"text","text":"## Linux安装dockers\n\n### 安装docker服务\n#### Redhat\n在线安装\n```shell\nyum install docker\n```\n离线安装\n```shell\n#下载所需rpm包\nrpm -ivh *.rpm --nodeps --force\n```\n#### Debian\n在线安装\n```shell\n\n```\n离线安装\n```shell\n\n```\n### 管理dockers服务\nsystemctl\n```shell\n# 启动、重启、停止、查看状态\nsystemctl start docker\nsystemctl restart docker\nsystemctl stop docker\nsystemctl status docker\nsystemctl enable docker\n```\n\n```shell\ndocker info\n# 查看docker版本\ndocker version\n```\n","x":-592,"y":320,"width":620,"height":640},
		{"id":"7d745bd05cb938b8","type":"text","text":"dockers数据保存在镜像外部","x":340,"y":120,"width":250,"height":60},
		{"id":"01f667e55cb22189","type":"text","text":"## docker容器数据卷\n\ndocker在Linux中的文件存储路径\n\n\n- `/var/lib/docker/images`：存放镜像\n- `/var/lib/docker/containers`：存放容器\n- `/var/lib/docker/volumes`：存放卷\n\n\n创建docker卷\n```shell\ndocker volume create test_volume\n```\n\n列处docker卷\n```shell\ndocker volume ls\n```\n\n查看docker卷信息\n```shell\ndocker volume inspect test_volume\n```\n\n删除docker卷\n```shell\ndocker volume rm test_volume\n```\n\ndocker run命令中使用-v参数，将卷挂载到容器的目录下，如果卷不存在会自动创建\n\n```shell\ndocker run -v test_volume:/var/lib/mysql/data\n```\n\ndocker也可以将主机的任意目录映射（绑定）到容器目录\n```shell\ndocker run -v /var/lib/mysql_data:/var/lib/mysql/data\n```","x":1040,"y":1960,"width":760,"height":1020},
		{"id":"c378bf5587393c16","type":"text","text":"## docker容器管理\n\n```shell\ndocker run [容器运行参数] [镜像名] [容器内运行的命令和参数]\n```\n\n容器运行参数\n\n| 参数名                          | 作用                       |\n| ---------------------------- | ------------------------ |\n| -d                           | 后台运行                     |\n| -it                          | 以交互模式运行容器，为容器重新分配一个伪输入终端 |\n| -p \\[宿主机端口\\|容器端口\\]           | 端口映射，可以传多个-p参数           |\n| --name=\\[容器名\\]               |                          |\n| --privileged=\\[true\\|false\\] |                          |\n\n\n\n\n\n\n\n```shell\n# 查看容器\ndocker ps -a\n```\n\n```shell\n# 启动、停止、重启、进入、删除容器\ndocker start|stop|restart|attach|rm [容器名|容器ID]\n\n```\n\n\n```shell\n# 进入容器内，进入容器交互界面\ndocker exec -it [容器名] /bin/bash\n# 推出容器\nexit\n```","x":120,"y":1080,"width":790,"height":691},
		{"id":"725825b4936b8008","type":"text","text":"## docker容器文件管理\n\n```shell\n# 拷贝容器内文件到容器外，冒号表示容器内路径\ndocker cp mysql:/etc/my.cnf /etc/my.cnf\n# 拷贝容器外文件到容器内\ndocker cp /etc/my.cnf mysql:/etc/my.cnf\n```","x":1040,"y":1080,"width":760,"height":691},
		{"id":"ae862cf787559a5b","type":"text","text":"## docker容器网络\n\n\n自己创建一个bridge网络，将容器加入这个网络\n```shell\ndocker network create [net_name]\ndocker network connect [net_name] [container_name]\n```\n\n同一网络中的容器可以使用容器名通信\n\n\n\n容器创建时默认加入bridge网络，可使用--network参数加入指定网络\n\n\n\n\n","x":120,"y":1960,"width":790,"height":760},
		{"id":"605afcef0325df32","type":"text","text":"## 构建docker镜像\ndocker file","x":-592,"y":1080,"width":620,"height":691},
		{"id":"06e1363e52f2801b","type":"text","text":"\n```shell\ndocker pull mysql\n# 启动\ndocker run \n\t--name mysqldock \n\t-e MYSQL_ROOT_PASSWORD=root \n\t-e MYSQL_DATABASE=localtrptestcopy \n\t-d \n\t-p 3306:3306 \n\t mysql\n# 进入容器\ndocker exec -it mysqldock bash\n# 退出容器\nexit\n# 保存容器，生成新镜像，mysql57是要保存的容器名，mysql是新镜像的repository\ndocker commit -m \"localtrptestcopy\" -a \"jettopro\" mysql57 mysql\n```\n\n","x":-592,"y":1940,"width":620,"height":780},
		{"id":"abd85644eb694d5a","type":"text","text":"## docker inspect 命令\n\n`docker inspect` 命令用于获取 Docker 对象（容器、镜像、卷、网络等）的详细信息。\n\n`docker inspect` 命令返回 JSON 格式的详细信息，可以帮助用户了解对象的配置和状态。","x":-623,"y":2847,"width":623,"height":293}
	],
	"edges":[]
}