{
	"nodes":[
		{"id":"2c64700a6833fd4f","type":"text","text":"### 序列化代码示例\n1. 需要被序列化的类\n```java\n@Data\npublic class User implements Serializable {\n \n    private static final long serialVersionUID = 1L;\n \n    private String name;\n \n    private String age;\n}\n\n```\n2. 序列化与反序列化\n```java\n@Slf4j\npublic class serializeTest {\n    \n    public static void main(String[] args) throws Exception {\n        User user = new User();\n        user.setName(\"fufu\");\n        user.setAge(\"18\");\n \n        serialize(user);\n        log.info(\"Java序列化前的结果:{} \", user);\n \n        User duser = deserialize();\n        log.info(\"Java反序列化的结果:{} \", duser);\n    }\n    /**\n     * @author xzf\n     * @description 序列化\n     * @date 2020/2/22 19:34\n     */\n    private static void serialize(User user) throws Exception {\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(\"D:\\\\111.txt\")));\n        oos.writeObject(user);\n        oos.close();\n    }\n    /**\n     * @author xzf\n     * @description 反序列化\n     * @date 2020/2/22 19:34\n     */\n    private static User deserialize() throws Exception {\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"D:\\\\111.txt\")));\n        return (User) ois.readObject();\n    }\n}\n```","x":-780,"y":-760,"width":1020,"height":1160},
		{"id":"baa621e4d1f9d23c","type":"text","text":"> [!faq]- 什么是序列化\n> 将类对象信息写入字节流，字节流可以通过网络传输，或持久化到数据库、磁盘\n\n\n> [!faq]- 序列化了哪些内容\n> 只序列化属性，不序列化方法和静态变量\n> \n\n\n> [!faq]- 为什么不序列化方法？\n> 因为\n\n\nserialVersionUID的作用？\n\ntransient关键字的作用？\n标记一个成员变量不需要被序列化\n\n静态\n","x":300,"y":-720,"width":596,"height":480}
	],
	"edges":[]
}