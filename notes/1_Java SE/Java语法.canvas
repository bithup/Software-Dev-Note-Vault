{
	"nodes":[
		{"id":"fbbbf35eacb11ef7","type":"file","file":"resources/unsorted/Java程序设计基础.md","x":-1464,"y":48,"width":400,"height":400},
		{"id":"3e2a90165b2a451f","type":"text","text":"## 字段&属性\n\n\n> [!NOTE] idea中field和property如何区分：\n> field就是类中定义的字段\n> property指有get或set方法的字段（无论字段是否是private）\n> 仅有set或get方法，没有定义字段，也视为属性","x":-440,"y":-360,"width":600,"height":300},
		{"id":"4b461f3ecadce572","type":"text","text":"## static&final&private\n\n- 常量：final修饰的字段\n- 变量：没有被修饰的字段\n- 静态常量：static final修饰的字段\n- 静态变量: static修饰的字段\nfinal修饰的字段在初始化后不可修改，常量是在创建对象时初始化，静态常量和静态变量都是在类加载时初始化\n\n加上private或public修饰\n- 私有常量\n- 私有变量\n- 私有静态常量\n- 私有静态变量\n- 公有常量\n- 公有变量\n- 公有静态常量\n- 公有静态变量\n三者两两组合皆可\nfinal定义字段值是否可以修改\nstatic定义字段属于类还是对象\nprivate（权限修饰符）定义字段在哪些类中可访问\n\n\n-----\n\nprivate修饰内部类、方法、字段\nstatic修饰内部类、方法、字段\nfinal修饰类、方法、字段\n\n---\n\nfinal修饰的字段（常量）必须被初始化，静态常量必须直接赋值或在static代码块中赋值，\n成员常量必须使用构造函数初始化\n","x":-440,"y":-20,"width":405,"height":1160},
		{"id":"6b2bfc42db74876e","type":"text","text":"## 方法和函数\n为什么c语言中叫函数，Java语言中叫方法？\n方法定义在类里面，调用方法通过类或对象调用\n函数并未定义在类中，调用函数直接使用函数名\npython中既有函数又有方法\n\n\n","x":-440,"y":-920,"width":600,"height":500},
		{"id":"63224348df9ac7f6","type":"text","text":"## 函数式编程\n函数式编程中，函数是一等公民，可以作为参数和返回值，用来实现高阶函数","x":240,"y":-920,"width":250,"height":500},
		{"id":"579e05ef08e1fccb","type":"text","text":"## 字段\n字段对应一片内存区域用来存储数据\n\n\n字段对应的数据可修改称为变量，不可修改称为常量，字段对应内存在类加载时初始化，称为静态字段，在创建对象时初始化称为成员字段\n\n\nprivate/public声明字段是否可以在当前类外访问\nstatic关键字声明字段在何时初始化\nfinal关键字声明字段初始化后是否可变\n\n","x":0,"y":-20,"width":250,"height":680},
		{"id":"5ba2a1d6264bb1b8","type":"text","text":"## 类和对象\n\n对象：对象（object也有物体、目标的意思）是软件开发中对具体事物的描述，对象具有状态和行为，状态用数据来描述，行为改变对象的状态；\n\n类：对具有相同特征和行为的对象的抽象\n\n类中包含：字段和方法，还可以有内部类\n\n","x":-440,"y":1200,"width":560,"height":760},
		{"id":"38fb6b6b2daa5d94","type":"file","file":"resources/unsorted/Java基础语法及面向对象.md","x":-67,"y":2835,"width":627,"height":645},
		{"id":"276d01cf932b56e6","type":"text","text":"## 面向对象\n\n\n使用场景，想实现一个接口，接口方法很少，不想单独定义一个类（外部类，内部类），直接再创建对象的表达式中重写方法；这种方式也使用于想要创建一个类的子类，不想单独定义子类的情况。\n","x":1080,"y":-920,"width":1080,"height":1240},
		{"id":"1e065d675fd36148","type":"text","text":"1. 简介\n\n   1. 历史\n\n   2. 新特性\n\n2. 基础\n\n   1. 数据类型\n\n      1. 基本类型\n\n      2. 引用类型\n\n         1. 数组\n\n         2. 类类型\n\n      3. 枚举类型\n\n   2. 修饰符\n\n      1. 访问控制符：default、private、public、protected\n\n      2. 其他修饰符：static、final、abstract、synchronized、transient、volatile\n\n   3. 运算符\n\n      1. 算术运算符\n\n      2. 关系运算符\n\n      3. 逻辑运算符\n\n      4. 位运算符\n\n      5. 赋值运算符\n\n      6. 条件运算符\n\n      7. instanceof\n\n      8. 运算符优先级和关联性\n\n   4. 程序结构\n\n      1. 顺序结构\n\n      2. 选择结构\n\n         1. if和else\n\n         2. switch和case\n\n      3. 循环结构\n\n         1. for\n\n         2. foreach\n\n         3. while和do while\n\n         4. 迭代器\n\n3. 面向对象\n\n   1. 抽象类和对象\n\n   2. 继承\n\n   3. 多态\n\n   4. Override和Overload\n\n   5. 创建实例\n\n   6. 接口\n\n   7. 抽象类\n\n   8. 包\n\n4. 常用类和方法\n\n   1. 字符类\n\n      1. string\n\n      2. stringBuffer\n\n      3. character\n\n   2. 日期\n\n   3. Number&Math\n\n5. 其他\n\n   1. 泛型\n\n   2. 注解\n\n   3. 序列化\n\n   4. 反射\n\n   5. Java8","x":-1362,"y":460,"width":602,"height":1060},
		{"id":"e4160b47a4ddf499","x":464,"y":1099,"width":476,"height":641,"type":"text","text":"## 继承\n通过子类调用方法，子类中有的方法都会调用子类的  \n```java\npublic class Test {  \n    public static void main(String[] args) {  \n        B b = new B();  \n        b.hello();  \n    }  \n}  \n  \nclass A {  \n    public void hi() {  \n        System.out.println(\"my name is A\");  \n    }  \n  \n    public void hello() {  \n        // this.hi();  \n        hi();  \n    }  \n}  \n  \nclass B extends A {  \n    @Override  \n    public void hi() {  \n        System.out.println(\"my name is B\");  \n    }  \n}\n```"},
		{"id":"69055ca3886ade95","x":-952,"y":-920,"width":432,"height":500,"type":"text","text":"## 方法声明与定义\n Java语言中，方法的声明和定义是在一起的，并不像C语言中将声明和定义分开。\n 可以将方法{}前的部分视为方法声明，{}内的部分视为方法定义"}
	],
	"edges":[]
}