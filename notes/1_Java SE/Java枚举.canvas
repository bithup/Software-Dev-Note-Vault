{
	"nodes":[
		{"id":"aae83892031f7c95","type":"text","text":"## 枚举\n\n### 定义枚举\n\n定义没有额外字段的枚举\n\n```java\npublic enum Color {  \n  RED, GREEN, BLANK, YELLOW  \n}  \n```\n\n定义有额外字段的枚举\n\n```java\npublic enum Gender {\n    MALE(\"男\", \"帅哥\"),\n    FEMALE(\"女\", \"美女\");\n\n    public String des;\n    private String des2;\n\n    // 构造函数默认只能是private的\n    Gender(String des, String des2) {\n        this.des = des;\n        this.des2 = des2;\n    }\n    // 还可以定义其他静态或实例方法\n}\n```\n\n\n\n\n\n```java\nenum Color {\n    RED(1, \"红\", 1),BLUE(2, \"蓝\", 2),YELLOW(1, \"黄\");\n    int i;\n    String s;\n    int i1;\n\n    Color(int i, String s, int i1) {\n        this.i = i;\n        this.s = s;\n        this.i1 = i1;\n    }\n\n    Color(int i, String s) {\n        this.i = i;\n        this.s = s;\n    }\n}\n```\n\n\n\n#### 重写toString和valueOf方法\n\n可以根据系统语言，自动实现国际化\n\n\n\n### 源码解读\n\nenum关键字和java.lang.Enum类的关系\n\n- 使用enum声明的类，都继承自Enum类，所以枚举不能再继承其他类\n\n- 枚举构造函数默认是private的，所以无法新建枚举实例\n\n- 所有枚举值都是public static final的\n\n- 枚举可比较（实现Comparable接口）\n\n- 枚举默认重写toString方法\n\n- 枚举还提供：valueOf，values，ordinal方法\n\n- java中枚举类实例名，变量名可以使用中文\n\n- 类内部定义的枚举默认是静态的，不用使用static修饰\n\n  \n\n![image-20211103141801672](img/image-20211103141801672-16508790106161.png)\n\n```java\npublic abstract class Enum<E extends Enum<E>>\n        implements Comparable<E>, Serializable {\n    private final String name;\n    private final int ordinal;\n}\n```\n\n可以通过getName()和getOrdinal()方法获取枚举值，name就是定义枚举时的名称（可以使用中文），ordinal就是索引值（按定义的顺序）\n\n#### 思考\n\n1. 如何理解`Enum<E extends Enum<E>>` ？[Enum> - musecho - 博客园 (cnblogs.com)](https://www.cnblogs.com/musecho/p/15309810.html)\n2. 何时使用枚举，何时使用常量\n\n\n\n### 应用\n\n#### 枚举实现接口\n\n##### 实现枚举name和ordinal的转换\n\n参考：https://www.cnblogs.com/dongying/p/6410889.html\n\n```java\npublic interface DisplayedEnum<T extends Enum<T>> {\n    default Integer getOrdinal() {\n      \n    }\n\n    @JsonValue\n    default String getName() {\n    }\n  \n  \t<T extends Enum<T>> T fromOrdinal(Class<T> enumClass, Integer ordinal) {}\n  \n  \t<T extends Enum<T>> T fromName(Class<T> enumClass, String name) {}\n\n    \n}\n```\n\n#### 使用接口组织枚举\n\n```java\npublic interface Food {  \n    enum Coffee implements Food{  \n        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  \n    }  \n    enum Dessert implements Food{  \n        FRUIT, CAKE, GELATO  \n    }  \n}  \n```\n\n#### swith枚举\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        EnumTest color=EnumTest.BLANK;\n        switch (color) {\n            case RED:\n                color = EnumTest.GREEN;\n                break;\n            case YELLOW:\n                color = EnumTest.RED;\n                break;\n            case GREEN:\n                color = EnumTest.YELLOW;\n                break;\n        }\n    }\n}\n```\n\n\n\n#### 枚举集合\n\n##### EnumSet\n\nEnumSet保证集合中的元素不重复\n\n使用场景：\n\n##### EnumMap\n\nEnumMap中的 key是enum类型，而value则可以是任意类型","x":-307,"y":-309,"width":487,"height":589},
		{"id":"f1bfded3e96bb810","x":-180,"y":-500,"width":400,"height":60,"type":"text","text":"什么是类型安全的枚举？\n"}
	],
	"edges":[]
}